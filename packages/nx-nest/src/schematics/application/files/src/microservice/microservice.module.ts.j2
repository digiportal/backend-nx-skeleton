import { ConfigService, GlobalExceptionFilter, ExtendedValidationPipe } from '@digiportal/nestjs-util'
import { Module, NestModule, ClassSerializerInterceptor } from '@nestjs/common'
import { APP_FILTER, APP_PIPE, APP_INTERCEPTOR } from '@nestjs/core'
{% if database is defined and enum.dbAdapters.TYPEORM in database %}
import { TypeOrmModule } from '@nestjs/typeorm'
{% elif database is defined and enum.dbAdapters.MONGOOSE in database %}
import { MongooseModule } from '@nestjs/mongoose'
{% endif %}
import { RpcGlobalExceptionFilter } from '@digiportal/nestjs-util-microservices'
{% if enum.components.MICROSERVICE_CLIENT in components %}
import { MicroserviceProviderModule } from '@digiportal/nestjs-util-microservices'
{% endif %}

import * as modules from './modules'
{% if database is defined and database != enum.database.NONE %}
{% if enum.extensions.EXTERNAL_BACKEND_INTERFACES in extensions and dbAdapters == enum.dbAdapters.TYPEORM %}
import { getDatabaseOptions } from '@{{ packageScope }}/{{ constants.BACKEND_INTERFACES_PACKAGE }}/database/database-typeorm'
{% elif enum.extensions.EXTERNAL_BACKEND_INTERFACES in extensions and dbAdapters == enum.dbAdapters.MONGOOSE %}
import { getDatabaseOptions } from '@{{ packageScope }}/{{ constants.BACKEND_INTERFACES_PACKAGE }}/database/database-mongoose'
{% else %}
import { getDatabaseOptions } from '../util/database'
{% endif %}
{% endif %}

export function createMicroserviceModule ({% if database is defined and database != enum.database.NONE %}mock = false{% endif %}): new({% if database != enum.database.NONE %}mock : boolean{% endif %}) => NestModule {
  @Module({
    providers: [
      ConfigService,
      {
        provide: APP_PIPE,
        useClass: ExtendedValidationPipe
      },
      {
        provide: APP_INTERCEPTOR,
        useClass: ClassSerializerInterceptor
      },
      {
        provide: APP_FILTER,
        useClass: GlobalExceptionFilter
      },
      {
        provide: APP_FILTER,
        useClass: RpcGlobalExceptionFilter
      }
    ],
    imports: [
      {% if database is defined and enum.dbAdapters.TYPEORM in database %}
      TypeOrmModule.forRoot(getDatabaseOptions(mock)),
      {% elif database is defined and enum.dbAdapters.MONGOOSE in database %}
      MongooseModule.forRoot(...getDatabaseOptions(mock)),
      {% endif %}
      {% if enum.components.MICROSERVICE_CLIENT in components %}
      MicroserviceProviderModule,
      {% endif %}
      ...Object.values(modules)
    ]
  })
  class MicroservicesModule implements NestModule {
    // eslint-disable-next-line @typescript-eslint/no-empty-function
    async configure (): Promise<any> {}
  }

  return MicroservicesModule
}
