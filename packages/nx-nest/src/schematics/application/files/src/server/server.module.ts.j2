import { MiddlewareConsumer, Module, NestModule, RequestMethod } from '@nestjs/common'
import { APP_FILTER,{% if server == enum.server.RESTFUL %} APP_INTERCEPTOR,{% endif %} APP_PIPE } from '@nestjs/core'
{% if server == enum.server.GRAPHQL %}
import { GraphQLModule } from '@nestjs/graphql'
import { join } from 'path'
import { graphQLContextParser, graphQLErrorParser } from './graphql-setup'
{% endif %}
{% if database is defined and enum.dbAdapters.TYPEORM in database %}
import { TypeOrmModule } from '@nestjs/typeorm'
{% elif database is defined and enum.dbAdapters.MONGOOSE in database %}
import { MongooseModule } from '@nestjs/mongoose'
{% endif %}
import {
  ConfigService,
  BadRequestExceptionFilter,
  GlobalExceptionFilter,
  MaintenanceMiddleware,
  MaintenanceModule,
  SetApiInfoHeaderMiddleware,
  setEnvironmentVariables,
  ExtendedValidationPipe
} from '@digiportal/nestjs-util'
{% if server == enum.server.RESTFUL %}
import {
  CacheLifetimeHelperInterceptor,
  InternalModule,
  RequestProfilerInterceptor,
} from '@digiportal/nestjs-util-restful'
{% endif %}
{% if enum.components.MICROSERVICE_CLIENT in components %}
import { MicroserviceProviderModule } from '@digiportal/nestjs-util-microservices'
{% endif %}
{% if enum.components.MICROSERVICE_CLIENT in components %}
import { MessageQueues } from '@{{ packageScope }}/{{ constants.MICROSERVICE_PROVIDER_PACKAGE }}'
{% endif %}

{% if server == enum.server.RESTFUL %}
import * as modules from './modules'
{% endif %}
{% if server == enum.server.GRAPHQL %}
import * as resolvers from './resolvers'
import {
  ApolloServerPluginLandingPageProductionDefault,
  ApolloServerPluginLandingPageLocalDefault
} from 'apollo-server-core'
{% endif %}
{% if database is defined and database != enum.database.NONE %}
{% if enum.extensions.EXTERNAL_BACKEND_INTERFACES in extensions and dbAdapters == enum.dbAdapters.TYPEORM %}
import { getDatabaseOptions } from '@{{ packageScope }}/{{ constants.BACKEND_INTERFACES_PACKAGE }}/database/database-typeorm'
{% elif enum.extensions.EXTERNAL_BACKEND_INTERFACES in extensions and dbAdapters == enum.dbAdapters.MONGOOSE %}
import { getDatabaseOptions } from '@{{ packageScope }}/{{ constants.BACKEND_INTERFACES_PACKAGE }}/database/database-mongoose'
{% else %}
import { getDatabaseOptions } from '../util/database'
{% endif %}
{% endif %}

export function createServerModule ({% if database is defined and database != enum.database.NONE %}mock = false{% endif %}): new({% if database is defined and database != enum.database.NONE %}mock : boolean{% endif %}) => NestModule {
  @Module({
    providers: [
      ConfigService,
      {
        provide: APP_FILTER,
        useClass: GlobalExceptionFilter
      },
      {
        provide: APP_FILTER,
        useClass: BadRequestExceptionFilter
      },
      {
        provide: APP_PIPE,
        useClass: ExtendedValidationPipe
      }{% if server == enum.server.RESTFUL %},
      {
        provide: APP_INTERCEPTOR,
        useClass: CacheLifetimeHelperInterceptor
      },
      {
        provide: APP_INTERCEPTOR,
        useClass: RequestProfilerInterceptor
      }{% endif %}
    ],
    imports: [
      {% if server == enum.server.GRAPHQL %}GraphQLModule.forRoot({
        autoSchemaFile: join(process.cwd(), '.graphql/schema.gql'),
        context: graphQLContextParser,
        formatError: graphQLErrorParser,
        useGlobalPrefix: true,
        introspection: true,
        path: '/',
        playground: false,
        plugins: [
          process.env.NODE_ENV === 'production'
            ? ApolloServerPluginLandingPageProductionDefault({ footer: false })
            : ApolloServerPluginLandingPageLocalDefault({ footer: false })
        ]
      }),
      ...Object.values(resolvers),{% endif %}
      {% if server == enum.server.RESTFUL %}
      ...Object.values(modules),
      {% endif %}
      {% if database is defined and enum.dbAdapters.TYPEORM in database %}
      TypeOrmModule.forRoot(getDatabaseOptions(mock)),
      {% elif database is defined and enum.dbAdapters.MONGOOSE in database %}
      MongooseModule.forRoot(...getDatabaseOptions(mock)),
      {% endif %}
      {% if enum.components.MICROSERVICE_CLIENT in components %}
      MicroserviceProviderModule.forRoot({ queue: [ {% for client in microserviceClient %}MessageQueues.{{ microserviceCasing[client].names.queue }}{% endfor %} ] }),
      {% endif %}
      {% if server == enum.server.RESTFUL %}
      InternalModule,
      {% endif %}
      MaintenanceModule
      ]
  })
  class ServerModule implements NestModule {
    async configure (consumer: MiddlewareConsumer): Promise<void> {
      await setEnvironmentVariables()

      consumer
        .apply(MaintenanceMiddleware, SetApiInfoHeaderMiddleware)
        .forRoutes({ path: '(.*)', method: RequestMethod.ALL })
    }
  }

  return ServerModule
}
