import { Module, NestModule } from '@nestjs/common'
{% if database is defined and enum.dbAdapters.TYPEORM in database %}
import { TypeOrmModule } from '@nestjs/typeorm'
{% elif database is defined and enum.dbAdapters.MONGOOSE in database %}
import { MongooseModule } from '@nestjs/mongoose'
{% endif %}

{% if database is defined and database != enum.database.NONE %}
{% if enum.extensions.EXTERNAL_BACKEND_INTERFACES in extensions and dbAdapters == enum.dbAdapters.TYPEORM %}
import { getDatabaseOptions } from '@{{ packageScope }}/{{ constants.BACKEND_INTERFACES_PACKAGE }}/database/database-typeorm'
{% elif enum.extensions.EXTERNAL_BACKEND_INTERFACES in extensions and dbAdapters == enum.dbAdapters.MONGOOSE %}
import { getDatabaseOptions } from '@{{ packageScope }}/{{ constants.BACKEND_INTERFACES_PACKAGE }}/database/database-mongoose'
{% else %}
import { getDatabaseOptions } from '../util/database'
{% endif %}
{% endif %}
import {
  ConfigService
} from '@digiportal/nestjs-util'
{% if enum.components.MICROSERVICE_CLIENT in components %}
import { MicroserviceProviderModule } from '@digiportal/nestjs-util-microservices'
{% endif %}

import * as modules from './modules'

/**
  * Utilizes (nestjs-commander)[https://docs.nestjs.com/recipes/nest-commander].
 */
export function createCommandModule ({% if database is defined and database != enum.database.NONE %}mock = false{% endif %}): new({% if database != enum.database.NONE %}mock : boolean{% endif %}) => NestModule {
@Module({
  providers: [
    ConfigService
    ],
  imports: [
    {% if database is defined and enum.dbAdapters.TYPEORM in database %}
    TypeOrmModule.forRoot(getDatabaseOptions(mock)),
    {% elif database is defined and enum.dbAdapters.MONGOOSE in database %}
    MongooseModule.forRoot(...getDatabaseOptions(mock)),
    {% endif %}
    {% if enum.components.MICROSERVICE_CLIENT in components %}
    MicroserviceProviderModule.forRoot({ queue: [ {% for client in microserviceClient %}MessageQueues.{{ microserviceCasing[client].names.queue }}{% endfor %} ] }),
    {% endif %}
    ...Object.values(modules)
    ]
})
  class CommandModule implements NestModule {
    // eslint-disable-next-line @typescript-eslint/no-empty-function
    async configure (): Promise<any> {}
  }

  return CommandModule
}
